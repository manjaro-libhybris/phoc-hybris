From 52efe925ecff80d708bfe21042c7cf795489462c Mon Sep 17 00:00:00 2001
From: Evangelos Ribeiro Tzaras <devrtz@fortysixandtwo.eu>
Date: Thu, 16 Jul 2020 23:48:49 +0200
Subject: [PATCH 1/2] d/control: Use Rules-Requires-Root: no

---
 debian/control | 1 +
 1 file changed, 1 insertion(+)

diff --git a/debian/control b/debian/control
index 5a17f17..7d32ec9 100644
--- a/debian/control
+++ b/debian/control
@@ -42,6 +42,7 @@ Build-Depends:
 Standards-Version: 4.1.3
 Section: libs
 Homepage: https://source.puri.sm/librem5/phoc
+Rules-Requires-Root: no
 
 Package: phoc
 Architecture: any
-- 
2.26.2


From 0c65eb7344907a651b30a9fe1ef2645018363c28 Mon Sep 17 00:00:00 2001
From: Evangelos Ribeiro Tzaras <devrtz@fortysixandtwo.eu>
Date: Wed, 8 Jul 2020 12:49:48 +0200
Subject: [PATCH 2/2] Implement keyforwarding with a new interface in
 phosh-private protocol

* protocols/phosh-private.xml: Add "keyboard_event" interface and bump
  version protocol version to 5
* src/phosh.c: Implement methods and bump protocol version
* src/phosh.h: Add phosh_private_keyboard_event struct and new methods
---
 protocols/phosh-private.xml |  84 +++++++++++++-
 src/keybindings.c           |  13 +--
 src/keybindings.h           |  12 ++
 src/keyboard.c              |  32 ++++++
 src/phosh.c                 | 218 +++++++++++++++++++++++++++++++++++-
 src/phosh.h                 |  13 +++
 6 files changed, 356 insertions(+), 16 deletions(-)

diff --git a/protocols/phosh-private.xml b/protocols/phosh-private.xml
index bc102f3..8f48025 100644
--- a/protocols/phosh-private.xml
+++ b/protocols/phosh-private.xml
@@ -1,5 +1,5 @@
 <protocol name="phosh">
-  <interface name="phosh_private" version="4">
+  <interface name="phosh_private" version="5">
     <description summary="Phone shell extensions">
       Private protocol between phosh and the compositor.
     </description>
@@ -26,7 +26,7 @@
       <description summary="request a window thumbnail for a given toplevel">
         Allows to retrieve a window thumbnail image for a given foreign
         toplevel via wlr_screencopy protocol.
-        
+
         The thumbnail will be scaled down to the size provided by
         max_width and max_height arguments, preserving original aspect
         ratio. Pass 0 to leave it unconstrained.
@@ -36,6 +36,86 @@
       <arg name="max_width" type="uint" />
       <arg name="max_height" type="uint" />
     </request>
+
+    <request name="get_keyboard_event" since="5">
+      <description summary="request a keyboard event handler">
+        Allows to subscribe to specific keyboard events.
+
+        The client grabs an accelerator by a string and gets an action id returned.
+        When the accelerator is used the client will be informed via the corresponding
+        action id.
+      </description>
+      <arg name="id" type="new_id" interface="phosh_private_keyboard_event"/>
+    </request>
+
+    </interface>
+
+  <interface name="phosh_private_keyboard_event" version="5">
+    <description summary="Interface for additional keyboard events">
+      The interface is meant to allow subscription and forwarding of keyboard events.
+    </description>
+    <enum name="error">
+      <entry name="invalid_argument" value="0"
+             summary="an invalid argument was provided in a request"/>
+      <entry name="invalid_keysym" value="1"
+             summary="keysym not subscribeable"/>
+      <entry name="already_subscribed" value="2"
+             summary="accelerator has already been subscribed to"/>
+      <entry name="misc_error" value="3"
+             summary="an miscellaneous error has occured"/>
+    </enum>
+    <event name="accelerator_activated_event" since="5">
+      <description summary="Report an accelerator press">
+        Forward an action to the client.
+      </description>
+      <arg name="action_id" type="uint" summary="The previously assigned action_id"/>
+      <arg name="timestamp" type="uint" summary="The timestamp when the key has been pressed"/>
+    </event>
+
+    <event name="grab_failed_event" since="5">
+      <description summary="Report subscription failure">
+        A previous accelerator grab request has failed.
+      </description>
+      <arg name="accelerator" type="string" summary="The failed accelerator"/>
+      <arg name="error" type="uint" summary="The error code"/>
+    </event>
+
+    <event name="grab_success_event" since="5">
+      <description summary="Report subscription success">
+        A previous accelerator grab request has succeeded.
+      </description>
+      <arg name="accelerator" type="string" summary="The subscribed accelerator"/>
+      <arg name="action_id" type="uint" summary="The id that has been assigned to the accelerator"/>
+    </event>
+
+    <request name="grab_accelerator_request" since="5">
+      <description summary="Subscribe to an accelerator">
+        Client subscribes to a specific accelerator.
+      </description>
+      <arg name="accelerator" type="string" summary="The accelerator string (with modifiers)"/>
+    </request>
+
+    <event name="ungrab_failed_event" since="5">
+      <description summary="Report unsubscription failure">
+        A previous accelerator ungrab request has failed.
+      </description>
+      <arg name="action_id" type="uint" summary="The failed action"/>
+      <arg name="error" type="uint" summary="The error code"/>
+    </event>
+
+    <event name="ungrab_success_event" since="5">
+      <description summary="Report unsubscription success">
+        A previous accelerator ungrab request has suceeded.
+      </description>
+      <arg name="action" type="uint" summary="The unsubscribed action"/>
+    </event>
+
+    <request name="ungrab_accelerator_request" since="5">
+      <description summary="Unsubscribe to an accelerator">
+        Client unsubscribes a specific accelerator"
+      </description>
+      <arg name="action_id" type="uint" summary="The action to unsubscribe"/>
+    </request>
   </interface>
 
   <!-- application switch/close handling -->
diff --git a/src/keybindings.c b/src/keybindings.c
index 07921db..e4ef9ef 100644
--- a/src/keybindings.c
+++ b/src/keybindings.c
@@ -20,17 +20,6 @@
 typedef void (*PhocKeyHandlerFunc) (struct roots_seat *);
 
 
-/**
- * PhocKeyCombo:
- *
- * A combination of modifiers and a key describing a keyboard shortcut
- */
-typedef struct
-{
-  guint32 modifiers;
-  xkb_keysym_t keysym;
-} PhocKeyCombo;
-
 
 typedef struct
 {
@@ -298,7 +287,7 @@ is_keycode (const gchar *string)
           g_ascii_isxdigit (string[3]));
 }
 
-static PhocKeyCombo *
+PhocKeyCombo *
 parse_accelerator (const gchar *accelerator)
 {
   PhocKeyCombo *combo;
diff --git a/src/keybindings.h b/src/keybindings.h
index a3164da..41a2c29 100644
--- a/src/keybindings.h
+++ b/src/keybindings.h
@@ -19,10 +19,22 @@ G_DECLARE_FINAL_TYPE (PhocKeybindings, phoc_keybindings, PHOC, KEYBINDINGS, GObj
 
 PhocKeybindings *phoc_keybindings_new (void);
 
+/**
+ * PhocKeyCombo:
+ *
+ * A combination of modifiers and a key describing a keyboard shortcut
+ */
+typedef struct
+{
+  guint32 modifiers;
+  xkb_keysym_t keysym;
+} PhocKeyCombo;
+
 struct roots_seat;
 gboolean         phoc_keybindings_handle_pressed (PhocKeybindings *self,
 						  guint32 modifiers,
 						  xkb_keysym_t *pressed_keysyms,
 						  guint32 length,
 						  struct roots_seat *seat);
+PhocKeyCombo *parse_accelerator (const gchar * accelerator);
 G_END_DECLS
diff --git a/src/keyboard.c b/src/keyboard.c
index 3d81163..40d2ce2 100644
--- a/src/keyboard.c
+++ b/src/keyboard.c
@@ -14,6 +14,7 @@
 #include <wlr/util/log.h>
 #include <xkbcommon/xkbcommon.h>
 #include "keyboard.h"
+#include "phosh.h"
 #include "seat.h"
 
 #include <glib.h>
@@ -142,6 +143,7 @@ keysym_is_modifier(xkb_keysym_t keysym)
   }
 }
 
+
 static void
 pressed_keysyms_update(xkb_keysym_t *pressed_keysyms,
                        const xkb_keysym_t *keysyms, size_t keysyms_len,
@@ -231,6 +233,29 @@ keyboard_execute_binding(PhocKeyboard *self,
   return false;
 }
 
+
+/**
+ * Forward keyboard bindings.
+ *
+ * Returns true if the keysym was handled by forwarding and false if the event
+ * should be propagated to clients.
+ */
+static bool
+keyboard_execute_subscribed_binding(PhocKeyboard *self,
+                                    xkb_keysym_t *pressed_keysyms, uint32_t modifiers,
+                                    const xkb_keysym_t *keysyms, size_t keysyms_len,
+                                    uint32_t time)
+{
+  bool handled = false;
+  for (size_t i = 0; i < keysyms_len; ++i) {
+    PhocKeyCombo combo = { modifiers, keysyms[i] };
+    handled = handled |
+      phosh_forward_keysym (&combo,
+                            time);
+  }
+  return handled;
+}
+
 /*
  * Get keysyms and modifiers from the keyboard as xkb sees them.
  *
@@ -307,6 +332,13 @@ phoc_keyboard_handle_key(PhocKeyboard *self,
                                        self->pressed_keysyms_raw, modifiers, keysyms, keysyms_len);
   }
 
+  // Handle subscribed keysyms
+  if (event->state == WLR_KEY_PRESSED && !handled) {
+    handled = keyboard_execute_subscribed_binding (self,
+                                                   self->pressed_keysyms_raw, modifiers,
+                                                   keysyms, keysyms_len, event->time_msec);
+  }
+
   if (!handled) {
     wlr_seat_set_keyboard(self->seat->seat, self->device);
     wlr_seat_keyboard_notify_key(self->seat->seat, event->time_msec,
diff --git a/src/phosh.c b/src/phosh.c
index 8f5acc2..6672111 100644
--- a/src/phosh.c
+++ b/src/phosh.c
@@ -25,7 +25,7 @@
 #include "phosh.h"
 #include "render.h"
 
-#define PHOSH_PRIVATE_VERSION 4
+#define PHOSH_PRIVATE_VERSION 5
 
 static
 void
@@ -113,6 +113,177 @@ handle_get_xdg_switcher (struct wl_client   *client,
                           "Use wlr-toplevel-management protocol instead");
 }
 
+static void
+phosh_private_keyboard_event_handle_resource_destroy (struct wl_resource *resource)
+{
+  struct phosh_private_keyboard_event * kbevent =
+    phosh_private_keyboard_event_from_resource (resource);
+
+  g_hash_table_remove_all (kbevent->subscribed_accelerators);
+  g_hash_table_unref (kbevent->subscribed_accelerators);
+  g_debug ("Destroying private_keyboard_event %p (res %p)", kbevent, kbevent->resource);
+  g_free (kbevent);
+}
+
+static bool
+phosh_private_keyboard_event_accelerator_is_registered (PhocKeyCombo                        *combo,
+                                                        struct phosh_private_keyboard_event *kbevent)
+{
+  gint64 key = ((gint64) combo->modifiers << 32) | combo->keysym;
+  gpointer ret = g_hash_table_lookup (kbevent->subscribed_accelerators, &key);
+  g_debug ("Accelerator is registered: Lookup -> %p", ret);
+  return (ret != NULL);
+}
+
+static bool
+phosh_private_accelerator_already_subscribed (PhocKeyCombo *combo)
+{
+  GList *l;
+  struct phosh_private_keyboard_event *kbevent;
+  PhocServer *server = phoc_server_get_default ();
+
+  struct phosh_private *phosh_private;
+  phosh_private = server->desktop->phosh;
+
+  for (l = phosh_private->keyboard_events; l != NULL; l = l->next) {
+    kbevent = (struct phosh_private_keyboard_event *)l->data;
+    if (phosh_private_keyboard_event_accelerator_is_registered (combo, kbevent))
+      return true;
+  }
+
+  return false;
+}
+
+static bool
+keysym_is_media (xkb_keysym_t keysym)
+{
+  switch (keysym) {
+  case XKB_KEY_XF86AudioLowerVolume:
+  case XKB_KEY_XF86AudioRaiseVolume:
+  case XKB_KEY_XF86AudioMute:
+  case XKB_KEY_XF86AudioMicMute:
+  case XKB_KEY_XF86AudioPlay:
+  case XKB_KEY_XF86AudioPause:
+  case XKB_KEY_XF86AudioStop:
+  case XKB_KEY_XF86AudioNext:
+  case XKB_KEY_XF86AudioPrev:
+    return true;
+  default:
+    return false;
+  }
+}
+
+static bool
+keysym_is_subscribeable (xkb_keysym_t keysym)
+{
+  return keysym_is_media (keysym);
+}
+
+static void
+phosh_private_keyboard_event_grab_accelerator_request (struct wl_client   *wl_client,
+                                                       struct wl_resource *resource,
+                                                       const char         *accelerator)
+{
+  guint new_action_id;
+  gint64 *new_key;
+
+  struct phosh_private_keyboard_event *kbevent = phosh_private_keyboard_event_from_resource (resource);
+  g_autofree PhocKeyCombo *combo = parse_accelerator (accelerator);
+
+  if (phosh_private_accelerator_already_subscribed (combo)) {
+    g_debug ("Accelerator %s already subscribed to!", accelerator);
+
+    phosh_private_keyboard_event_send_grab_failed_event (resource,
+                                                         accelerator,
+                                                         PHOSH_PRIVATE_KEYBOARD_EVENT_ERROR_ALREADY_SUBSCRIBED);
+    return;
+  }
+
+  if (!keysym_is_subscribeable (combo->keysym)) {
+    g_debug ("Requested keysym %s is not subscribeable!", accelerator);
+
+    phosh_private_keyboard_event_send_grab_failed_event (resource,
+                                                         accelerator,
+                                                         PHOSH_PRIVATE_KEYBOARD_EVENT_ERROR_INVALID_KEYSYM);
+    return;
+  }
+
+  new_action_id = kbevent->phosh->last_action_id++;
+
+  /* detect wrap-around and make sure we fail from here on out */
+  if (new_action_id == 0) {
+    g_debug ("Action ID wrap-around detected while trying to subscribe %s", accelerator);
+    phosh_private_keyboard_event_send_grab_failed_event (resource,
+                                                         accelerator,
+                                                         PHOSH_PRIVATE_KEYBOARD_EVENT_ERROR_MISC_ERROR);
+    kbevent->phosh->last_action_id--;
+    return;
+  }
+
+  new_key = (gint64 *) g_malloc (sizeof (gint64));
+  *new_key = ((gint64) combo->modifiers << 32) | combo->keysym;
+
+  /* subscribed accelerators of kbevent */
+  g_hash_table_insert (kbevent->subscribed_accelerators,
+                       new_key, GUINT_TO_POINTER (new_action_id));
+
+  phosh_private_keyboard_event_send_grab_success_event (resource,
+                                                        accelerator,
+                                                        new_action_id);
+
+  g_debug ("Registered accelerator %s (sym %d mod %d) on phosh_private_keyboard_event %p (client %p)",
+           accelerator, combo->keysym, combo->modifiers, kbevent, wl_client);
+
+}
+
+static const struct phosh_private_keyboard_event_interface phosh_private_keyboard_event_impl = {
+  .grab_accelerator_request = phosh_private_keyboard_event_grab_accelerator_request,
+};
+
+static void
+handle_get_keyboard_event (struct wl_client   *client,
+                           struct wl_resource *phosh_private_resource,
+                           uint32_t            id)
+{
+  struct phosh_private_keyboard_event *kbevent =
+    g_new0 (struct phosh_private_keyboard_event, 1);
+
+  if (kbevent == NULL) {
+    wl_client_post_no_memory (client);
+    return;
+  }
+
+  int version = wl_resource_get_version (phosh_private_resource);
+  kbevent->resource = wl_resource_create (client, &phosh_private_keyboard_event_interface, version, id);
+  if (kbevent->resource == NULL) {
+    g_free (kbevent);
+    wl_client_post_no_memory (client);
+    return;
+  }
+
+  kbevent->subscribed_accelerators = g_hash_table_new_full (g_int64_hash,
+                                                            g_int64_equal,
+                                                            g_free, g_free);
+  if (kbevent->subscribed_accelerators == NULL) {
+      wl_resource_destroy (kbevent->resource);
+      g_free (kbevent);
+      wl_client_post_no_memory (client);
+      return;
+    }
+
+  struct phosh_private *phosh_private = phosh_private_from_resource (phosh_private_resource);
+
+  phosh_private->keyboard_events = g_list_append (phosh_private->keyboard_events, kbevent);
+
+  g_debug ("new phosh_private_keyboard_event %p (res %p)", kbevent, kbevent->resource);
+  wl_resource_set_implementation (kbevent->resource,
+                                  &phosh_private_keyboard_event_impl,
+                                  kbevent,
+                                  phosh_private_keyboard_event_handle_resource_destroy);
+
+  kbevent->phosh = phosh_private;
+}
+
 
 static void
 phosh_private_screencopy_frame_handle_resource_destroy (struct wl_resource *resource)
@@ -303,6 +474,9 @@ phosh_handle_resource_destroy (struct wl_resource *resource)
 
   phosh->resource = NULL;
   phosh->panel = NULL;
+
+  g_list_free (phosh->keyboard_events);
+
   g_debug ("Destroying phosh %p (res %p)", phosh, resource);
 }
 
@@ -310,7 +484,8 @@ phosh_handle_resource_destroy (struct wl_resource *resource)
 static const struct phosh_private_interface phosh_private_impl = {
   phosh_rotate_display,
   handle_get_xdg_switcher,
-  handle_get_thumbnail
+  handle_get_thumbnail,
+  handle_get_keyboard_event
 };
 
 
@@ -359,6 +534,7 @@ phosh_create (PhocDesktop *desktop, struct wl_display *display)
   g_info ("Initializing phosh private interface");
   phosh->global = wl_global_create (display, &phosh_private_interface, PHOSH_PRIVATE_VERSION, phosh, phosh_bind);
 
+  phosh->last_action_id = 1;
   if (!phosh->global) {
     return NULL;
   }
@@ -391,3 +567,41 @@ phosh_private_screencopy_frame_from_resource (struct wl_resource *resource)
                                    &phosh_private_screencopy_frame_impl));
   return wl_resource_get_user_data (resource);
 }
+
+struct phosh_private_keyboard_event *
+phosh_private_keyboard_event_from_resource (struct wl_resource *resource)
+{
+  assert (wl_resource_instance_of (resource, &phosh_private_keyboard_event_interface,
+                                   &phosh_private_keyboard_event_impl));
+  return wl_resource_get_user_data (resource);
+}
+
+bool
+phosh_forward_keysym (PhocKeyCombo *combo,
+                      uint32_t timestamp)
+{
+  GList *l;
+  struct phosh_private_keyboard_event *kbevent;
+  PhocServer *server = phoc_server_get_default ();
+
+  struct phosh_private *phosh_private;
+  phosh_private = server->desktop->phosh;
+  bool forwarded = false;
+
+  for (l = phosh_private->keyboard_events; l != NULL; l = l->next) {
+    kbevent = l->data;
+    g_debug("addr of kbevent and res kbev %p res %p", kbevent, kbevent->resource);
+    /*  forward the keysym if it is has been subscribed to */
+    if (phosh_private_keyboard_event_accelerator_is_registered (combo, kbevent))
+      {
+        gint64 key = ((gint64)combo->modifiers << 32) | combo->keysym;
+        guint action_id = GPOINTER_TO_UINT (g_hash_table_lookup (kbevent->subscribed_accelerators, &key));
+        phosh_private_keyboard_event_send_accelerator_activated_event (kbevent->resource,
+                                                                       action_id,
+                                                                       timestamp);
+        forwarded = true;
+      }
+  }
+
+  return forwarded;
+}
diff --git a/src/phosh.h b/src/phosh.h
index af55abe..7d1d854 100644
--- a/src/phosh.h
+++ b/src/phosh.h
@@ -6,12 +6,16 @@
 
 #pragma once
 #include <wlr/types/wlr_layer_shell_v1.h>
+#include <gmodule.h>
+#include "keybindings.h"
 
 #define PHOSH_PRIVATE_XDG_SWITCHER_SINCE_VERSION 2
 
 struct phosh_private {
   struct wl_resource* resource;
   struct wl_global *global;
+  GList *keyboard_events;
+  guint last_action_id;
 
   PhocDesktop *desktop;
   struct {
@@ -21,6 +25,12 @@ struct phosh_private {
   struct wlr_layer_surface_v1 *panel;
 };
 
+struct phosh_private_keyboard_event {
+  GHashTable *subscribed_accelerators; // key=PhocKeyCombo, value=action_id
+  struct wl_resource *resource;
+  struct phosh_private *phosh;
+};
+
 struct phosh_private_screencopy_frame {
   struct wl_resource *resource, *toplevel;
   struct phosh_private *phosh;
@@ -41,3 +51,6 @@ void phosh_destroy(struct phosh_private *shell);
 struct phosh_private *phosh_private_from_resource(struct wl_resource *resource);
 struct phosh_private_xdg_switcher *phosh_private_xdg_switcher_from_resource(struct wl_resource *resource);
 struct phosh_private_screencopy_frame *phosh_private_screencopy_frame_from_resource(struct wl_resource *resource);
+struct phosh_private_keyboard_event *phosh_private_keyboard_event_from_resource(struct wl_resource *resource);
+
+bool phosh_forward_keysym (PhocKeyCombo *combo, uint32_t timestamp);
-- 
2.26.2

